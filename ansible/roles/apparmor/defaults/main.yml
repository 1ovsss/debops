---
# .. vim: foldmarker=[[[,]]]:foldmethod=marker

# .. Copyright (C) 2015-2017 Robin Schneider <ypid@riseup.net>
# .. Copyright (C) 2015-2017 DebOps <https://debops.org/>
# .. SPDX-License-Identifier: GPL-3.0-only

# .. _apparmor__ref_defaults:

# debops-contrib.apparmor default variables [[[
# =============================================

# .. contents:: Sections
#    :local:
#
# .. include:: includes/all.rst


# Packages and installation [[[
# -----------------------------

# .. envvar:: apparmor__base_packages [[[
#
# List of base packages to install.
apparmor__base_packages:
  - 'apparmor'
  - 'apparmor-utils'
  - 'apparmor-profiles'
  - 'apparmor-profiles-extra'

                                                                   # ]]]
# .. envvar:: apparmor__packages [[[
#
# List of additional packages to install with AppArmor.
#
# Example::
#
#    apparmor__packages:
#      - 'apparmor-notify'
#
apparmor__packages: []

                                                                   # ]]]
# .. envvar:: apparmor__enabled [[[
#
# Should AppArmor be enabled?
apparmor__enabled: True

                                                                   # ]]]
# .. envvar:: apparmor__manage_grub [[[
#
# How should role write the required kernel options into the Grub configuration.
# The default is delegate this to the debops.grub_ role.
# If set to False, this role will do that internally without debops.grub_.
# Note that this role is not as flexible in configuring Grub as debops.grub_ is.
apparmor__manage_grub: False

                                                                   # ]]]
# .. envvar:: apparmor__kernel_parameters [[[
#
# Kernel parameters needed to enable AppArmor (if not already enabled by
# default, as in recent Debian/Ubuntu kernel packages). Only relevant if
# :ref:`apparmor__manage_grub` is enabled.
apparmor__kernel_parameters:
  - 'apparmor=1'
  - 'security=apparmor'

                                                                   # ]]]
                                                                   # ]]]
# AppArmor profiles [[[
# ---------------------

# Global configuration of the status of individual profiles.
# More specific matches overwrite more generic matches (example host overrules
# global).
#
# Choices are:
#
# ``enforce``
#   Result in enforcement of the policy defined in the profile as well as
#   logging policy violation attempts.
#
# ``complain``
#  This will not enforce the policy.  Instead, it will log policy violations.
#
# ``disable``
#   In this mode, policy violations are neither prevented nor logged.
#
# Example::
#
#    apparmor__global_profile_status:
#      'usr.sbin.nmbd': 'complain'
#

# .. envvar:: apparmor__default_profiles [[[
#
# List of profiles to enable/disable, defined by the role.
apparmor__default_profiles: []

                                                                   # ]]]
# .. envvar:: apparmor__profiles [[[
#
# List of profiles to enable/disable, defined for all hosts in the Ansible
# inventory.
apparmor__profiles: []

                                                                   # ]]]
# .. envvar:: apparmor__group_profiles [[[
#
# List of profiles to enable/disable, defined on hosts in a specific Ansible
# inventory group.
apparmor__group_profiles: []

                                                                   # ]]]
# .. envvar:: apparmor__host_profiles [[[
#
# List of profiles to enable/disable, defined on specific hosts in the Ansible
# inventory.
apparmor__host_profiles: []

                                                                   # ]]]
# .. envvar:: apparmor__dependent_profiles [[[
#
# Variable definitions managed by roles using this role as dependency.
apparmor__dependent_profiles: []

                                                                   # ]]]
# .. envvar:: apparmor__combined_profiles [[[
#
# A combination of the profiles to enable/disable, defined by the other
# variables, used in role tasks.
apparmor__combined_profiles: '{{ apparmor__default_profiles
                                 + apparmor__profiles
                                 + apparmor__group_profiles
                                 + apparmor__host_profiles
                                 + apparmor__dependent_profiles }}'

                                                                   # ]]]
                                                                   # ]]]
# AppArmor local profile modifications [[[
# ----------------------------------------
#
# Local modifications to system profiles.
#
# Those changes will be configured in :file:`/etc/apparmor.d/local/`.
# Check :file:`/etc/apparmor.d/local/README` for details.
# All three dictionaries are merged into one profile configuration.
#
# ``comment``
#   String, optional, default "Uncommented rule group". Comment for the given
#   rules.
#
# ``rules``
#   List of strings, required. AppArmor rules. Note that the rules are not
#   comma terminated, this is done by the role template.
#
# ``by_role``
#   Strings, optional, default "". Name of a role which manages the rules.
#   Useful for using this role as role dependency.
#
# ``delete``
#   Boolean, optional, default ``False``. Delete the given rule(s).
#
# Example::
#
#    apparmor__local_config_global:
#
#      'usr.sbin.dnsmasq':
#        - comment: 'Allow dnsmasq to read upstream DNS servers'
#          rules:
#            - '/etc/resolvconf/upstream.conf r'
#            - '/etc/hosts.dnsmasq r'
#          by_role: 'debops.dnsmasq'
#        - comment: 'Allow dnsmasq to read /usr/share/dnsmasq-base/trust-anchors.conf'
#          rules:
#            - '/usr/share/dnsmasq-base/* r'
#          by_role: 'debops.dnsmasq'
#
#      'usr.bin.pidgin':
#        - comment: 'Allow local Pidgin plugins'
#          rules:
#            - '@{HOME}/.purple/plugins/** rm'
#
# See also: https://wiki.ubuntu.com/DebuggingApparmor#Adjusting_Tunables
#
# Examples:
#
# .. code-block:: yaml
#    :linenos:
#
#    apparmor__global_tunables: |
#      @{HOMEDIRS}+=/exports/home/
#

# .. envvar:: apparmor__default_locals [[[
#
# List of default local profile modifications defined by the role.
apparmor__default_locals: []

                                                                   # ]]]
# .. envvar:: apparmor__locals [[[
#
# List of local profile modifications defined for all hosts in the Ansible
# inventory.
apparmor__locals: []

                                                                   # ]]]
# .. envvar:: apparmor__group_locals [[[
#
# List of local profile modifications defined on hosts in a specific Ansible
# inventory group.
apparmor__group_locals: []

                                                                   # ]]]
# .. envvar:: apparmor__host_locals [[[
#
# List of local profile modifications defined on specific hosts in the Ansible
# inventory.
apparmor__host_locals: []

                                                                   # ]]]
# .. envvar:: apparmor__dependent_locals [[[
#
# Variable definitions managed by roles using this role as dependency.
apparmor__dependent_locals: []

                                                                   # ]]]
# .. envvar:: apparmor__combined_locals [[[
#
# A combination of the local profile modifications defined by the other
# variables, used in role tasks.
apparmor__combined_locals: '{{ apparmor__default_locals
                               + apparmor__locals
                               + apparmor__group_locals
                               + apparmor__host_locals
                               + apparmor__dependent_locals }}'

                                                                   # ]]]
                                                                   # ]]]
# AppArmor tunables [[[
# ---------------------
#
# See also: https://wiki.ubuntu.com/DebuggingApparmor#Adjusting_Tunables
#
# Examples:
#
# .. code-block:: yaml
#    :linenos:
#
#    apparmor__global_tunables: |
#      @{HOMEDIRS}+=/exports/home/
#

# .. envvar:: apparmor__default_tunables [[[
#
# List of default tunables defined by the role.
apparmor__default_tunables: []

                                                                   # ]]]
# .. envvar:: apparmor__tunables [[[
#
# List of tunables defined for all hosts in the Ansible inventory.
apparmor__tunables: []

                                                                   # ]]]
# .. envvar:: apparmor__group_tunables [[[
#
# List of tunables defined on hosts in a specific Ansible inventory group.
apparmor__group_tunables: []

                                                                   # ]]]
# .. envvar:: apparmor__host_tunables [[[
#
# List of tunables defined on specific hosts in the Ansible inventory.
apparmor__host_tunables: []

                                                                   # ]]]
# .. envvar:: apparmor__dependent_tunables [[[
#
# Variable definitions managed by roles using this role as dependency.
apparmor__dependent_tunables: []

                                                                   # ]]]
# .. envvar:: apparmor__combined_tunables [[[
#
# A combination of the tunables defined by the other variables, used in
# role tasks.
apparmor__combined_tunables: '{{ apparmor__default_tunables
                                 + apparmor__tunables
                                 + apparmor__group_tunables
                                 + apparmor__host_tunables
                                 + apparmor__dependent_tunables }}'

                                                                   # ]]]
                                                                   # ]]]
                                                                   # ]]]
