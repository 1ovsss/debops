---
# Copyright (C) 2015-2017 Robin Schneider <ypid@riseup.net>
# Copyright (C) 2015-2017 DebOps <https://debops.org/>
# SPDX-License-Identifier: GPL-3.0-only

- name: Import custom Ansible plugins
  ansible.builtin.import_role:
    name: 'ansible_plugins'

- name: Import DebOps global handlers
  ansible.builtin.import_role:
    name: 'global_handlers'

- name: Install required packages
  ansible.builtin.package:
    name: '{{ q("flattened", (apparmor__base_packages
                              + apparmor__packages)) }}'
    state: 'present'
  register: apparmor__register_packages
  until: apparmor__register_packages is succeeded

- name: Add AppArmor kernel parameters to GRUB configuration
  ansible.builtin.template:
    src: 'etc/default/grub.d/debops.apparmor.cfg.j2'
    dest: '/etc/default/grub.d/debops.apparmor.cfg'
    mode: '0644'
  when: >
    apparmor__enabled | d(False) | bool and
    apparmor__manage_grub | d(False) | bool
  notify: [ 'Update GRUB' ]

- name: Remove AppArmor kernel parameters from GRUB configuration
  ansible.builtin.file:
    path: '/etc/default/grub.d/debops.apparmor.cfg'
    state: 'absent'
  when: >
    not apparmor__enabled | d(False) | bool or
    not apparmor__manage_grub | d(False) | bool
  notify: [ 'Update GRUB' ]

- name: Remove legacy GRUB configuration options
  ansible.builtin.lineinfile:
    dest: '/etc/default/grub'
    regexp: '^GRUB_CMDLINE_LINUX="(.*?)\$GRUB_CMDLINE_LINUX_ANSIBLE_APPARMOR(.*)"'
    line: 'GRUB_CMDLINE_LINUX="\1 \2"'
    backrefs: yes
    mode: '0644'
  notify: [ 'Update GRUB' ]

- name: Ensure AppArmor service is started
  ansible.builtin.service:
    name: 'apparmor'
    state: 'started'
    enabled: True
  when: apparmor__fact_apparmor_enabled_and_loaded | bool

- name: Configure tunables
  ansible.builtin.include_tasks: handle_tunables.yml
  loop: '{{ apparmor__combined_tunables | debops.debops.parse_kv_items() }}'
  loop_control:
    label: '{{ item.name }}'
  tags: [ 'apparmor::tunables' ]

- name: Configure local changes to system profiles
  ansible.builtin.include_tasks: handle_locals.yml
  loop: '{{ apparmor__combined_locals | debops.debops.parse_kv_items() }}'
  loop_control:
    label: '{{ item.name }}'
  tags: [ 'apparmor::locals' ]

- name: Configure profiles
  ansible.builtin.include_tasks: handle_profiles.yml
  loop: '{{ apparmor__combined_profiles | debops.debops.parse_kv_items() }}'
  loop_control:
    label: '{{ item.name }}'
  tags: [ 'apparmor::profiles' ]

# FIXME: Use handlers
#- name: Reload changed profiles
#  ansible.builtin.command: 'apparmor_parser --replace "/etc/apparmor.d/{{ item.item.key }}"'  # noqa no-handler
#  register: apparmor__register_reload
#  changed_when: apparmor__register_reload.changed | bool
#  when: (item is changed and apparmor__register_tunables is not changed)
#  with_items: '{{ apparmor__register_local_config.results }}'
#
#- name: Reload all AppArmor profiles
#  ansible.builtin.service:  # noqa no-handler
#    name: 'apparmor'
#    state: 'reloaded'
#  when: apparmor__fact_apparmor_enabled_and_loaded | bool and apparmor__register_tunables is changed

- name: Disable the AppArmor service
  ansible.builtin.service:
    name: 'apparmor'
    state: 'stopped'
    enabled: False
  when: not apparmor__enabled | d(False) | bool

- name: Unload all AppArmor profiles
  ansible.builtin.command: aa-teardown
  when: not apparmor__enabled | d(False) | bool
