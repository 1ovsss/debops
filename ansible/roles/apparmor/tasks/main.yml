---
# Copyright (C) 2015-2017 Robin Schneider <ypid@riseup.net>
# Copyright (C) 2015-2017 DebOps <https://debops.org/>
# SPDX-License-Identifier: GPL-3.0-only

- name: Import custom Ansible plugins
  ansible.builtin.import_role:
    name: 'ansible_plugins'

- name: Import DebOps global handlers
  ansible.builtin.import_role:
    name: 'global_handlers'

- name: Combine variables
  ansible.builtin.set_fact:
    apparmor__profile_status: '{{ apparmor__global_profile_status | d({})
                                  | combine(apparmor__host_group_profile_status | d({}))
                                  | combine(apparmor__host_profile_status | d({})) }}'
    apparmor__local_config: '{{ apparmor__local_dependent_config | d({})
                                | combine(apparmor__local_config_global | d({}))
                                | combine(apparmor__local_group_config | d({}))
                                | combine(apparmor__local_host_config | d({})) }}'

- name: Install required packages
  ansible.builtin.package:
    name: '{{ q("flattened", (apparmor__base_packages
                              + apparmor__packages)) }}'
    state: 'present'
  register: apparmor__register_packages
  until: apparmor__register_packages is succeeded

- name: Add AppArmor kernel parameters to GRUB configuration
  ansible.builtin.template:
    src: 'etc/default/grub.d/debops.apparmor.cfg.j2'
    dest: '/etc/default/grub.d/debops.apparmor.cfg'
    mode: '0644'
  when: >
    apparmor__enabled | d(False) | bool and
    apparmor__manage_grub | d(False) | bool
  notify: [ 'Update GRUB' ]

- name: Remove AppArmor kernel parameters from GRUB configuration
  ansible.builtin.file:
    path: '/etc/default/grub.d/debops.apparmor.cfg'
    state: 'absent'
  when: >
    not apparmor__enabled | d(False) | bool or
    not apparmor__manage_grub | d(False) | bool
  notify: [ 'Update GRUB' ]

- name: Remove legacy GRUB configuration options
  ansible.builtin.lineinfile:
    dest: '/etc/default/grub'
    regexp: '^GRUB_CMDLINE_LINUX="(.*?)\$GRUB_CMDLINE_LINUX_ANSIBLE_APPARMOR(.*)"'
    line: 'GRUB_CMDLINE_LINUX="\1 \2"'
    backrefs: yes
    mode: '0644'
  notify: [ 'Update GRUB' ]

- name: Check if the running kernel has been started with AppArmor enabled
  ansible.builtin.set_fact:
    apparmor__fact_apparmor_enabled_and_loaded: '{{
      (apparmor__enabled | d() | bool) and
      (ansible_cmdline.apparmor | d(0) | string == "1") and
      (ansible_cmdline.security | d("none") == "apparmor") }}'
  check_mode: False

- name: Flush the handlers in case the next tasks fails
  ansible.builtin.meta: flush_handlers

- name: Send mail to administrator if reboot is required to enable AppArmor
  community.general.mail:
    from: 'root@{{ ansible_fqdn }}'
    subject: '{{ apparmor__mail_subject }}'
    to: '{{ apparmor__mail_to | d([]) | list | join(",") }}'
    charset: 'utf8'
    body: '{{ apparmor__mail_body }}'
  when: (apparmor__fact_apparmor_enabled_and_loaded | bool and apparmor__mail_to | d())

## Seems that there is currently a bug in the version include in Debian Jessie
## which throws an exception when AppArmor has not been enabled yet.
- name: Put all profiles into enforcement mode
  ansible.builtin.shell: |
    set -o nounset -o pipefail -o errexit &&
    find /etc/apparmor.d -maxdepth 1 -type f | while read file
    do
      if grep --quiet "flags.*complain" "$file"; then
        aa-enforce "$file"
      fi
    done
  args:
    executable: 'bash'
  register: apparmor__register_enforce_all_profiles
  changed_when: (apparmor__register_enforce_all_profiles.stdout | d())
  when: (apparmor__enforce_all_profiles | d() | bool)

- name: Set profile status
  ansible.builtin.command: aa-{{ item.value }} "{{ item.key }}"
  register: apparmor__register_profile_status
  # changed_when: (apparmor__register_profile_status.stdout | d())
  ## FIXME: Currently changed_when seems to be tricky.
  changed_when: False
  failed_when: |
    apparmor__register_profile_status.rc != 0 and (
      "Warning: unable to find a suitable fs in /proc/mounts, is it mounted?"
      not in apparmor__register_profile_status.stderr and
      apparmor__fact_apparmor_enabled_and_loaded | bool
    )
  ## AppArmor tries to load the profile with the new status into the Kernel after changing it.
  ## This does not work if the Kernel has not been started with AppArmor support.
  ## But the profile configuration file is updated anyway and will be picked up on next reboot with AppArmor support.
  with_dict: '{{ apparmor__profile_status }}'

- name: Ensure AppArmor service is started
  ansible.builtin.service:
    name: 'apparmor'
    state: 'started'
    enabled: True
  when: apparmor__fact_apparmor_enabled_and_loaded | bool

- name: Configure tunables
  ansible.builtin.include_tasks: handle_tunables.yml
  loop: '{{ apparmor__combined_tunables | debops.debops.parse_kv_items() }}'
  loop_control:
    label: '{{ item.name }}'
  tags: [ 'apparmor::tunables' ]

- name: Configure additions or overrides of system profiles
  ansible.builtin.template:
    src: 'etc/apparmor.d/local/local.j2'
    dest: '/etc/apparmor.d/local/{{ item.key }}'
    mode: '0640'
    owner: 'root'
    group: 'root'
  register: apparmor__register_local_config
  with_dict: '{{ apparmor__local_config }}'

# FIXME: Use handlers
#- name: Reload changed profiles
#  ansible.builtin.command: 'apparmor_parser --replace "/etc/apparmor.d/{{ item.item.key }}"'  # noqa no-handler
#  register: apparmor__register_reload
#  changed_when: apparmor__register_reload.changed | bool
#  when: (item is changed and apparmor__register_tunables is not changed)
#  with_items: '{{ apparmor__register_local_config.results }}'
#
#- name: Reload all AppArmor profiles
#  ansible.builtin.service:  # noqa no-handler
#    name: 'apparmor'
#    state: 'reloaded'
#  when: apparmor__fact_apparmor_enabled_and_loaded | bool and apparmor__register_tunables is changed

- name: Disable the AppArmor service
  ansible.builtin.service:
    name: 'apparmor'
    state: 'stopped'
    enabled: False
  when: not apparmor__enabled | d(False) | bool

- name: Unload all AppArmor profiles
  ansible.builtin.command: aa-teardown
  when: not apparmor__enabled | d(False) | bool
