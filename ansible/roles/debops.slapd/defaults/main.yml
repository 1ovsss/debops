---
# .. vim: foldmarker=[[[,]]]:foldmethod=marker

# Default variables
# =================
#
# .. contents:: Sections
#    :local:
#
# .. include:: ../../../includes/global.rst


# APT packages [[[
# ----------------

# .. envvar:: slapd__base_packages [[[
#
# List of required APT packages for OpenLDAP service.
slapd__base_packages: [ 'slapd', 'ldap-utils', 'ssl-cert' ]

                                                                   # ]]]
# .. envvar:: slapd__packages [[[
#
# List of additional APT packages to install with OpenLDAP service.
slapd__packages: []
                                                                   # ]]]
                                                                   # ]]]
# OpenLDAP UNIX environment [[[
# -----------------------------

# .. envvar:: slapd__user [[[
#
# Name of the UNIX account used by the OpenLDAP service.
slapd__user: 'openldap'

                                                                   # ]]]
# .. envvar:: slapd__group [[[
#
# Name of the UNIX group used by the OpenLDAP service.
slapd__group: 'openldap'

                                                                   # ]]]
# .. envvar:: slapd__additional_groups [[[
#
# List of additional UNIX groups the OpenLDAP account should have access to.
slapd__additional_groups: [ 'ssl-cert' ]
                                                                   # ]]]
                                                                   # ]]]
# LDAP database environment [[[
# -----------------------------

# .. envvar:: slapd__domain [[[
#
# DNS domain name which will be used for OpenLDAP BaseDN.
slapd__domain: '{{ ansible_local.core.domain
                   if (ansible_local|d() and ansible_local.core|d() and
                       ansible_local.core.domain|d())
                   else (ansible_domain if ansible_domain else ansible_hostname) }}'

                                                                   # ]]]
# .. envvar:: slapd__basedn [[[
#
# BaseDN value of the main OpenLDAP server that contains the LDAP data.
slapd__basedn: '{{ "dc=" + slapd__domain.split(".") | join(",dc=") }}'

                                                                   # ]]]
# .. envvar:: slapd__superuser_config_password [[[
#
# The password defined for the superuser of the ``cn=config`` LDAP database.
slapd__superuser_config_password: '{{ "{CRYPT}" + lookup("password", secret
                                                         + "/slapd/cn=config/cn=admin,cn=config.password"
                                                         + " encrypt=sha512_crypt length=32") }}'

                                                                   # ]]]
# .. envvar:: slapd__superuser_data_password [[[
#
# The password defined for the superuser of the main LDAP database.
slapd__superuser_data_password: '{{ "{CRYPT}" + lookup("password", secret
                                                       + "/slapd/" + slapd__basedn
                                                       + "/cn=admin," + slapd__basedn + ".password"
                                                       + " encrypt=sha512_crypt length=32") }}'
                                                                   # ]]]
                                                                   # ]]]
# Support for DebOps PKI and TLS [[[
# ----------------------------------

# .. envvar::: slapd__pki [[[
#
# Enable or disable support for X.509 certificates using the :ref:`debops.pki`
# Ansible role.
slapd__pki: '{{ (ansible_local.pki.enabled
                 if (ansible_local|d() and ansible_local.pki|d() and
                     ansible_local.pki.enabled|d())
                 else False) | bool }}'

                                                                   # ]]]
# .. envvar:: slapd__pki_path [[[
#
# Absolute path to the directory that contains PKI realms.
slapd__pki_path: '{{ (ansible_local.pki.base_path
                      if (ansible_local|d() and ansible_local.pki|d() and
                          ansible_local.pki.base_path|d())
                      else "/etc/pki/realms") }}'

                                                                   # ]]]
# .. envvar:: slapd__pki_realm [[[
#
# Default PKI realm used by the OpenLDAP server. In a multi-master clustered
# setup the configuration is shared, therefore all cluster nodes should use the
# same PKI realm name.
slapd__pki_realm: '{{ (ansible_local.pki.realm
                       if (ansible_local|d() and ansible_local.pki|d() and
                           ansible_local.pki.realm|d())
                       else "domain") }}'

                                                                   # ]]]
# .. envvar:: slapd__pki_ca [[[
#
# Name of the Root CA certificate file used by the OpenLDAP server, relative to
# the PKI realm directory.
slapd__pki_ca: 'CA.crt'

                                                                   # ]]]
# .. envvar:: slapd__pki_crt [[[
#
# Name of the X.509 certificate file used by the OpenLDAP server, relative to
# the PKI realm directory.
slapd__pki_crt: 'default.crt'

                                                                   # ]]]
# .. envvar:: slapd__pki_key [[[
#
# Name of the private key used by the OpenLDAP server, relative to the PKI
# realm directory.
slapd__pki_key: 'default.key'

                                                                   # ]]]
# .. envvar:: slapd__dhparam_set [[[
#
# Specify the Diffie-Hellman parameter set to use by the OpenLDAP server.
# See :ref:`debops.dhparam` Ansible role for more details.
slapd__dhparam_set: 'default'

                                                                   # ]]]
# .. envvar:: slapd__dhparam_file [[[
#
# Absolute path to the file with Diffie-Hellman parameters used by the OpenLDAP
# server. If it's empty, the custom Diffie-Hellman parameters will not be
# configured.
slapd__dhparam_file: '{{ (ansible_local.dhparam[slapd__dhparam_set]
                          if (ansible_local|d() and ansible_local.dhparam|d() and
                              ansible_local.dhparam[slapd__dhparam_set]|d())
                          else "") }}'

                                                                   # ]]]
# .. envvar:: slapd__tls_ca_certificate [[[
#
# Absolute path to the Root CA certificate used by the OpenLDAP server to
# authenticate TLS client certificates.
slapd__tls_ca_certificate: '{{ slapd__pki_path + "/" + slapd__pki_realm + "/" + slapd__pki_ca }}'

                                                                   # ]]]
# .. envvar:: slapd__tls_certificate [[[
#
# Absolute path to the X.509 certificate used by the OpenLDAP server.
slapd__tls_certificate: '{{ slapd__pki_path + "/" + slapd__pki_realm + "/" + slapd__pki_crt }}'

                                                                   # ]]]
# .. envvar:: slapd__tls_private_key [[[
#
# Absolute path to the private key used by the OpenLDAP server.
slapd__tls_private_key: '{{ slapd__pki_path + "/" + slapd__pki_realm + "/" + slapd__pki_key }}'

                                                                   # ]]]
# .. envvar:: slapd__tls_cipher_suite [[[
#
# TLS cipher suite required by the server. On Debian, you need to use the
# GnuTLS cipher suite names, because :command:`slapd` daemon is compiled
# against GnuTLS instead of OpenSSL.
slapd__tls_cipher_suite: 'SECURE256:PFS:-VERS-SSL3.0:-VERS-TLS-ALL:+VERS-TLS1.2:-SHA1:-ARCFOUR-128'
                                                                   # ]]]
                                                                   # ]]]
# OpenLDAP configuration tasks [[[
# --------------------------------

# .. envvar:: slapd__default_tasks [[[
#
# List of the default tasks performed on the OpenLDAP server, defined by the
# role.
slapd__default_tasks:

  - name: 'Configure the OpenLDAP server log level'
    dn: 'cn=config'
    attributes:
      olcLogLevel: 'stats'
    state: 'exact'

  - name: 'Define the default password hashing method'
    dn: 'olcDatabase={-1}frontend,cn=config'
    attributes:
      olcPasswordHash: '{CRYPT}'
    state: 'exact'

  - name: 'Configure password salt format used by the crypt(3) hash function'
    dn: 'cn=config'
    attributes:
      olcPasswordCryptSaltFormat: '$6$%.16s'
    state: 'exact'

  - name: 'Set the cn=config database root credentials'
    dn: 'olcDatabase={0}config,cn=config'
    attributes:
      olcRootDN: 'cn=admin,cn=config'
      olcRootPW: '{{ slapd__superuser_config_password }}'
    state: 'exact'
    no_log: True

  - name: 'Set the main database root credentials'
    dn: 'olcDatabase={1}mdb,cn=config'
    attributes:
      olcRootDN: '{{ "cn=admin," + slapd__basedn }}'
      olcRootPW: '{{ slapd__superuser_data_password }}'
    state: 'exact'
    no_log: True

  - name: 'Configure TLS certificates'
    dn: 'cn=config'
    attributes:
      olcTLSCACertificateFile:  '{{ slapd__tls_ca_certificate }}'
      olcTLSCertificateFile:    '{{ slapd__tls_certificate }}'
      olcTLSCertificateKeyFile: '{{ slapd__tls_private_key }}'
    state: '{{ "exact" if slapd__pki|bool else "init" }}'

  - name: 'Configure Diffie-Hellman parameters'
    dn: 'cn=config'
    attributes:
      olcTLSDHParamFile: '{{ slapd__dhparam_file }}'
    state: '{{ "exact" if slapd__dhparam_file|d() else "init" }}'

  - name: 'Configure TLS cipher suites'
    dn: 'cn=config'
    attributes:
      olcTLSCipherSuite: '{{ slapd__tls_cipher_suite }}'
    state: '{{ "exact" if slapd__pki|bool else "init" }}'

  - name: 'Set default Security Strength Factors enforced by the server'
    dn: 'cn=config'
    attributes:
      olcLocalSSF: '128'
      olcSecurity: 'ssf=128 update_ssf=128 simple_bind=128'
    state: '{{ "exact" if slapd__pki|bool else "init" }}'

  - name: 'Define indexes present in the main database'
    dn: 'olcDatabase={1}mdb,cn=config'
    attributes:
      olcDbIndex:
        - 'cn,uid eq'
        - 'member,memberUid eq'
        - 'objectClass eq'
        - 'sn eq,pres'
        - 'gn eq,pres'
        - 'uidNumber,gidNumber eq'
        - 'entryCSN,entryUUID eq'

                                                                   # ]]]
# .. envvar:: slapd__tasks [[[
#
# List of the tasks performed on the OpenLDAP server, defined on all hosts in
# the Ansible inventory.
slapd__tasks: []

                                                                   # ]]]
# .. envvar:: slapd__group_tasks [[[
#
# List of the tasks performed on the OpenLDAP server, defined on hosts in
# a specific Ansible inventory group.
slapd__group_tasks: []

                                                                   # ]]]
# .. envvar:: slapd__host_tasks [[[
#
# List of the tasks performed on the OpenLDAP server, defined on specific hosts
# in the Ansible inventory.
slapd__host_tasks: []

                                                                   # ]]]
# .. envvar:: slapd__combined_tasks [[[
#
# Variable which combines all of the OpenLDAP task variables and is used in the
# role tasks and templates.
slapd__combined_tasks: '{{ slapd__default_tasks
                               + slapd__tasks
                               + slapd__group_tasks
                               + slapd__host_tasks }}'
                                                                   # ]]]
                                                                   # ]]]
# OpenLDAP BaseDN configuration [[[
# ---------------------------------

# .. envvar:: slapd_backend
#
# Specify database backend to use.
slapd_backend: '{{ "hdb" if (ansible_distribution_release in [ "wheezy", "precise" ])
                         else "mdb" }}'


# .. envvar:: slapd_log_level
#
# Log level (see :manpage:`slapd-config(5)` for details).
slapd_log_level: 'none'


# .. envvar:: slapd_default_services
#
# Default services enabled in :file:`/etc/default/slapd` (change requires
# restart).
slapd_default_services: [ 'ldap:///', 'ldaps:///', 'ldapi:///' ]


# Network access to OpenLDAP server [[[
# -------------------------------------

# .. envvar:: slapd__allow [[[
#
# List of IP addresses or CIDR subnets which should have access to the OpenLDAP
# server, defined on all hosts in the Ansible inventory.
slapd__allow: []


# .. envvar:: slapd__group_allow [[[
#
# List of IP addresses or CIDR subnets which should have access to the OpenLDAP
# server, defined on hosts in a specific Ansible inventory group.
slapd__group_allow: []


# .. envvar:: slapd__host_allow
#
# List of IP addresses or CIDR subnets which should have access to the OpenLDAP
# server, defined on specific hosts in the Ansible inventory.
slapd__host_allow: []


# .. envvar:: slapd_anonymous_bind
#
# Deny anonymous bind to the server by default and require authentication.
# Set to ``True`` to allow anonymous bind.
slapd_anonymous_bind: False


# .. slapd system configuration [[[1
#
# ------------------------------
#   slapd system configuration
# ------------------------------

# .. envvar:: slapd_snapshot
#
# Create snapshots of LDAP database periodically.
slapd_snapshot: True


# .. envvar:: slapd_snapshot_period
#
# Snapshot period: ``daily``, ``weekly``.
slapd_snapshot_period: 'weekly'


# .. ldapscripts configuration [[[1
#
# -----------------------------
#   ldapscripts configuration
# -----------------------------

# See :file:`templates/etc/ldapscripts/ldapscripts.conf` for more information
# about these variables.

# .. envvar:: slapd_ldapscripts
#
# Enable :command:`ldapscripts` support.
slapd_ldapscripts: False


# .. envvar:: slapd_ldapscripts_server
#
# LDAP server to configure.
slapd_ldapscripts_server: 'ldap://localhost'


# .. envvar:: slapd_ldapscripts_suffix
#
# Default BaseDN to use in ldapscripts.
slapd_ldapscripts_suffix: '{{ slapd_basedn }}'


# .. envvar:: slapd_ldapscripts_gsuffix
#
# Oranizational Unit for Groups.
slapd_ldapscripts_gsuffix: 'ou=Groups'


# .. envvar:: slapd_ldapscripts_usuffix
#
# Organizational Unit for Users.
slapd_ldapscripts_usuffix: 'ou=Users'


# .. envvar:: slapd_ldapscripts_msuffix
#
# Organizational Unit for Machines.
slapd_ldapscripts_msuffix: 'ou=Machines'


# .. envvar:: slapd_ldapscripts_binddn
#
# BindDN admin account.
slapd_ldapscripts_binddn: '{{ slapd_basedn_admin }}'


# .. envvar:: slapd_ldapscripts_bindpwfile
#
# BindDN password file.
slapd_ldapscripts_bindpwdfile: '/etc/ldapscripts/ldapscripts.passwd'


# .. envvar:: slapd_ldapscripts_password_lookup
#
# Where to look for admin account password.
slapd_ldapscripts_password_lookup: '{{ slapd_basedn_admin_password }}'


# .. envvar:: slapd_ldapscripts_gidstart
#
# Start ID for Groups.
slapd_ldapscripts_gidstart: '10000'


# .. envvar:: slapd_ldapscripts_uidstart
#
# Start ID for Users.
slapd_ldapscripts_uidstart: '10000'


# .. envvar:: slapd_ldapscripts_midstart
#
# Start ID for Machines.
slapd_ldapscripts_midstart: '20000'


# .. envvar:: slapd_ldapscripts_gclass
#
# Group membership management. Possible values: ``posixGroup``,
# ``groupOfNames``, ``groupOfUniqueNames``.
slapd_ldapscripts_gclass: 'posixGroup'


# .. envvar:: slapd_ldapscripts_gdummymember
#
#
slapd_ldapscripts_gdummymember: 'uid=dummy,$USUFFIX,$SUFFIX'


# .. envvar:: slapd_ldapscripts_passwordgen
#
# User password generation.
slapd_ldapscripts_passwordgen: 'pwgen'


# .. Custom LDAP schema [[[1
#
# ----------------------
#   Custom LDAP schema
# ----------------------

# .. envvar:: slapd_ldap_schema
#
# These files will be automatically loaded into ``cn=config`` configuration
# database by a helper script. You need to specify absolute paths to
# :file:`*.ldif` files. Default set can be found in :file:`/etc/ldap/schema/`.
slapd_ldap_schema:

    # Additional attributes and classes for LDAP Name Service
  - '/usr/local/etc/ldap/schema/ldapns.ldif'

    # Support for SSH Public Key lookup in LDAP
  - '/usr/local/etc/ldap/schema/openssh-lpk.ldif'


# .. LDAP Access Control List [[[1
#
# ----------------------------
#   LDAP Access Control List
# ----------------------------

# .. envvar:: slapd_ldap_access_control_list
#
# List of olcAccess attributes configured on the server.
slapd_ldap_access_control_list: '{{ slapd_ldap_access_control_list_default }}'


# .. envvar:: slapd_acl_tls_ssf
#
# Security Strength Factor used in ACL entries.
slapd_acl_tls_ssf: '{{ "tls_ssf=128 ssf=128"
                       if slapd_pki | bool else "" }}'


# .. envvar:: slapd_ldap_access_control_list_default
#
# Default LDAP ACL. Order of entries is important!
slapd_ldap_access_control_list_default:

  - |
    to attrs=userPassword,shadowLastChange
    by {{ slapd_acl_tls_ssf }} self write
    by {{ slapd_acl_tls_ssf }} anonymous auth
    by {{ slapd_acl_tls_ssf }} dn="{{ slapd_basedn_admin }}" write
    by * none

  - |
    to attrs=uid,uidNumber,gidNumber,homeDirectory,loginShell
    by {{ slapd_acl_tls_ssf }} self read
    by {{ slapd_acl_tls_ssf }} dn="{{ slapd_basedn_admin }}" write
    by {{ slapd_acl_tls_ssf }} users read

  - |
    to dn.base=""
    by {{ slapd_acl_tls_ssf }} * read

  - |
    to *
    by {{ slapd_acl_tls_ssf }} self read
    by {{ slapd_acl_tls_ssf }} dn.subtree="ou=Machines,{{ slapd_basedn }}" read
    by {{ slapd_acl_tls_ssf }} dn.subtree="ou=Services,{{ slapd_basedn }}" read
    by {{ slapd_acl_tls_ssf }} dn="{{ slapd_basedn_admin }}" write
    by * none


# Configuration variables for other Ansible roles [[[
# ---------------------------------------------------

# .. envvar:: slapd__python__dependent_packages3 [[[
#
# Configuration for the :ref:`debops.python` Ansible role.
slapd__python__dependent_packages3:

  - '{{ []
        if (ansible_distribution_release in
            ([ "wheezy", "jessie", "stretch",
               "precise", "trusty", "xenial" ]))
        else "python3-ldap" }}'

                                                                   # ]]]
# .. envvar:: slapd__python__dependent_packages2 [[[
#
# Configuration for the :ref:`debops.python` Ansible role.
slapd__python__dependent_packages2:

  - 'python-ldap'

                                                                   # ]]]
# .. envvar:: slapd__ferm__dependent_rules [[[
#
# Firewall configuration managed by the :ref:`debops.ferm` Ansible role.
slapd__ferm__dependent_rules:

  - name: 'accept_slapd'
    type: 'accept'
    protocol: [ 'tcp', 'udp' ]
    dport: [ 'ldap' ]
    multiport: True
    saddr: '{{ slapd__allow + slapd__group_allow + slapd__host_allow }}'
    accept_any: True
    weight: '50'
    by_role: 'debops.slapd'

                                                                   # ]]]
# .. envvar:: slapd__tcpwrappers__dependent_allow [[[
#
# Configuration of TCP Wrappers through the :ref:`debops.tcpwrappers` Ansible
# role.
slapd__tcpwrappers__dependent_allow:

  - daemon: 'slapd'
    client: '{{ slapd__allow + slapd__group_allow + slapd__host_allow }}'
    default: 'ALL'
    weight: '50'
    filename: 'slapd_dependent_allow'
    comment: 'Allow connections to OpenLDAP service'
                                                                   # ]]]
                                                                   # ]]]
