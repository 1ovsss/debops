---

- name: Install OpenLDAP packages
  package:
    name: '{{ q("flattened", (slapd__base_packages + slapd__packages)) }}'
    state: 'present'
  register: slapd__register_packages
  until: slapd__register_packages is succeeded

- name: Allow access to additional UNIX groups by the OpenLDAP service
  user:
    name: '{{ slapd__user }}'
    groups: '{{ slapd__additional_groups }}'
    append: True
    state: 'present'
  register: slapd__register_unix_groups

- name: Restart slapd if UNIX groups were modified
  service:
    name: 'slapd'
    state: 'restarted'
  when: slapd__register_unix_groups is changed

- name: Configure OpenLDAP modules
  ldap_attr:
    dn: 'cn=module{0},cn=config'
    name: '{{ item.attribute | d(item.attr | d(item.name)) }}'
    values: '{{ item.value
                if (item.value is string)
                else (item.value
                      | selectattr("state", "equalto", "present")
                      | map(attribute="name") | list) }}'
    state: '{{ item.state }}'
  loop: '{{ slapd__combined_modules | parse_kv_config }}'
  loop_control:
    label: '{{ {"state": item.state,
                "attribute": (item.attribute | d(item.attr | d(item.name))),
                "value": (item.value
                          if (item.value is string)
                          else (item.value
                                | selectattr("state", "equalto", "present")
                                | map(attribute="name") | list))} }}'
  when: item.name|d() and item.state not in [ 'ignore' ]
  no_log: '{{ item.no_log | d(False) }}'

- name: Configure OpenLDAP global attributes
  ldap_attr:
    dn: 'cn=config'
    name: '{{ item.attribute | d(item.attr | d(item.name)) }}'
    values: '{{ item.value
                if (item.value is string)
                else (item.value
                      | selectattr("state", "equalto", "present")
                      | map(attribute="name") | list) }}'
    state: '{{ item.state }}'
  loop: '{{ slapd__combined_attributes | parse_kv_config }}'
  loop_control:
    label: '{{ {"state": item.state,
                "attribute": (item.attribute | d(item.attr | d(item.name))),
                "value": (item.value
                          if (item.value is string)
                          else (item.value
                                | selectattr("state", "equalto", "present")
                                | map(attribute="name") | list))} }}'
  when: item.name|d() and item.state not in [ 'ignore' ]
  no_log: '{{ item.no_log | d(False) }}'

- name: Confgure OpenLDAP databases
  include_tasks: 'configure_databases.yml'
  loop_control:
    loop_var: 'database'
  loop: '{{ q("flattened", slapd__combined_databases) | parse_kv_items(merge_keys=["attributes"]) }}'
  when: database.name|d() and database.dn|d() and
        database.state|d('present') not in [ 'absent', 'ignore' ]

#- name: Pre hooks
#  include: '{{ lookup("task_src", "slapd/pre_main.yml") }}'
#
#- name: Configure domain for OpenLDAP in debconf
#  debconf:
#    name: 'slapd'
#    question: '{{ item }}'
#    vtype: 'string'
#    value: '{{ slapd_domain }}'
#  with_items: [ 'slapd/domain', 'shared/organization' ]
#
#- name: Configure database backend for OpenLDAP in debconf
#  debconf:
#    name: 'slapd'
#    question: 'slapd/backend'
#    vtype: 'string'
#    value: '{{ slapd_backend | upper }}'
#
#- name: Install helper scripts
#  copy:
#    src: 'usr/local/sbin/'
#    dest: '/usr/local/sbin/'
#    owner: 'root'
#    group: 'root'
#    mode: '0755'
#
#- name: Copy custom LDAP schema files
#  copy:
#    src: 'usr/local/etc/ldap/schema/'
#    dest: '/usr/local/etc/ldap/schema/'
#    owner: 'root'
#    group: 'root'
#    mode: '0644'
#
#- name: Load custom LDAP schema files
#  command: load-ldap-schema {{ item }}
#  with_items: '{{ slapd_ldap_schema }}'
#  register: slapd_register_load_schema
#  when: slapd_ldap_schema is defined and slapd_ldap_schema
#  changed_when: slapd_register_load_schema.stdout|d()
#
#- include: tls.yml
#- include: anonymous_bind.yml
#
#- include: ldap_configuration.yml
#  tags: slapd-config
#
#- name: Set slapd log level
#  ldap_attr:
#    dn: 'cn=config'
#    name: '{{ item.key }}'
#    values: '{{ item.value }}'
#    state: 'exact'
#  with_dict:
#    olcLogLevel: '{{ slapd_log_level }}'
#
#- name: Configure enabled services
#  lineinfile:
#    dest: '/etc/default/slapd'
#    regexp: '^SLAPD_SERVICES='
#    line: 'SLAPD_SERVICES="{{ slapd_default_services | join(" ") }}"'
#    state: 'present'
#  notify: [ 'Restart slapd' ]
#
#- include: ldapscripts.yml
#  when: slapd_ldapscripts|bool
#
#- name: Create snapshot task in cron
#  cron:
#    name: 'Create snapshots of OpenLDAP database'
#    special_time: '{{ slapd_snapshot_period }}'
#    cron_file: 'ansible_slapd-snapshot'
#    user: 'root'
#    state: 'present'
#    job: '/usr/local/sbin/slapd-snapshot {{ slapd_snapshot_period }} 30'
#  when: slapd_snapshot|bool
#
#- name: Post hooks
#  include: '{{ lookup("task_src", "slapd/post_main.yml") }}'
