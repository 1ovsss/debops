---

- name: Prepare OpenLDAP installation to use the rfc2307bis schema
  include_tasks: 'prepare_rfc2307bis.yml'
  when: (slapd__rfc2307bis_enabled|bool and
         (ansible_local is undefined or ansible_local.slapd is undefined))

- name: Install OpenLDAP packages
  package:
    name: '{{ q("flattened", (slapd__base_packages
                              + slapd__schema_packages
                              + slapd__packages)) }}'
    state: 'present'
  register: slapd__register_packages
  until: slapd__register_packages is succeeded

- name: Allow access to additional UNIX groups by the OpenLDAP service
  user:
    name: '{{ slapd__user }}'
    groups: '{{ slapd__additional_groups }}'
    append: True
    state: 'present'
  register: slapd__register_unix_groups

- name: Restart slapd if UNIX groups were modified
  service:
    name: 'slapd'
    state: 'restarted'
  when: slapd__register_unix_groups is changed

- name: Ensure that DebOps schema directory exists
  file:
    path: '{{ slapd__debops_schema_path }}'
    state: 'directory'
    mode: '0755'

- name: Copy custom DebOps schemas to the OpenLDAP host
  copy:
    src: 'etc/ldap/schema/debops/'
    dest: '{{ slapd__debops_schema_path + "/" }}'
    mode: '0644'

- name: Load custom LDAP schemas
  script: 'script/ldap-load-schema {{ item }}'
  loop: '{{ q("flattened", slapd__combined_schemas) }}'
  register: slapd__register_load_schemas
  changed_when: (slapd__register_load_schemas.stdout|d() and
                 (item | basename | regex_replace('.schema$','') + ' already exists in the LDAP, skippingâ€¦')
                 not in slapd__register_load_schemas.stdout_lines)
  tags: [ 'role::slapd:schema' ]

- name: Perform OpenLDAP tasks
  include_tasks: 'slapd_tasks.yml'
  loop: '{{ q("flattened", slapd__combined_tasks) | parse_kv_items }}'
  loop_control:
    label: '{{ {"state": item.state,
                "dn": item.dn,
                "attributes": item.attributes|d({})} }}'
  when: item.name|d() and item.dn|d() and
        item.state|d('present') not in [ 'init', 'ignore' ]
  no_log: '{{ item.no_log | d(True
                              if ("userPassword" in (item.attributes|d({})).keys() or
                                  "olcRootPW"    in (item.attributes|d({})).keys())
                              else False) }}'

#- name: Pre hooks
#  include: '{{ lookup("task_src", "slapd/pre_main.yml") }}'
#
#- name: Configure domain for OpenLDAP in debconf
#  debconf:
#    name: 'slapd'
#    question: '{{ item }}'
#    vtype: 'string'
#    value: '{{ slapd_domain }}'
#  with_items: [ 'slapd/domain', 'shared/organization' ]
#
#- name: Configure database backend for OpenLDAP in debconf
#  debconf:
#    name: 'slapd'
#    question: 'slapd/backend'
#    vtype: 'string'
#    value: '{{ slapd_backend | upper }}'
#
#- name: Install helper scripts
#  copy:
#    src: 'usr/local/sbin/'
#    dest: '/usr/local/sbin/'
#    owner: 'root'
#    group: 'root'
#    mode: '0755'
#
#- include: anonymous_bind.yml
#
#- name: Configure enabled services
#  lineinfile:
#    dest: '/etc/default/slapd'
#    regexp: '^SLAPD_SERVICES='
#    line: 'SLAPD_SERVICES="{{ slapd_default_services | join(" ") }}"'
#    state: 'present'
#  notify: [ 'Restart slapd' ]
#
#- include: ldapscripts.yml
#  when: slapd_ldapscripts|bool
#
#- name: Create snapshot task in cron
#  cron:
#    name: 'Create snapshots of OpenLDAP database'
#    special_time: '{{ slapd_snapshot_period }}'
#    cron_file: 'ansible_slapd-snapshot'
#    user: 'root'
#    state: 'present'
#    job: '/usr/local/sbin/slapd-snapshot {{ slapd_snapshot_period }} 30'
#  when: slapd_snapshot|bool
#
#- name: Post hooks
#  include: '{{ lookup("task_src", "slapd/post_main.yml") }}'
